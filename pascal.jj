options {
	STATIC = false;
}

PARSER_BEGIN(Pascal)
import java.io.PrintStream; 

class Pascal {
	public RS rs = new RS();
	public CodeWriter cw = new CodeWriter();
	static public void main(String[] args)
	throws Exception {
		Pascal parser = new Pascal( System.in );
		parser.Start( System.out );
	}

}
PARSER_END(Pascal)


SKIP : { " " | "\t" | "\n" | "\r" | "\r\n" }
MORE : { < "{" > : IN_COMMENT }
<IN_COMMENT> MORE : { < "}" > : DEFAULT | < ~[] > }
TOKEN : { < PROGRAM       : "program" > }
TOKEN : { < DEBUG_ST      : "$%DEBUG_ST" > }
TOKEN : { < VAR           : "var" > }
TOKEN : { < PROCEDURE     : "procedure" > }
TOKEN : { < BEGIN         : "begin" > }
TOKEN : { < END           : "end" > }
TOKEN : { < IF            : "if" > }
TOKEN : { < THEN          : "then" > }
TOKEN : { < ELSE          : "else" > }
TOKEN : { < WHILE         : "while" > }
TOKEN : { < DO            : "do" > }
TOKEN : { < CASE          : "case" > }
TOKEN : { < OF            : "of" > }
TOKEN : { < DIV           : "div" > }
TOKEN : { < AND           : "and" > }
TOKEN : { < NOT           : "not" > }
TOKEN : { < EQUAL         : "=" > }
TOKEN : { < ASSIGN        : ":=" > }
TOKEN : { < DIFFERENT     : "<>" > }
TOKEN : { < LESS          : "<" > }
TOKEN : { < LESS_EQUAL    : "<=" > }
TOKEN : { < GREATER_EQUAL : ">=" > }
TOKEN : { < GREATER       : ">" > }
TOKEN : { < PLUS          : "+" > }
TOKEN : { < MINUS         : "-" > }
TOKEN : { < TIMES         : "*" > }
TOKEN : { < OR            : "or" > }
TOKEN : { < NUMBER        : (["0"-"9"])+ > }
TOKEN : { < IDENTIFIER    : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* > }
TOKEN : { < COMMA         : "," > }
TOKEN : { < SEMICOLON     : ";" > }
TOKEN : { < PERIOD        : "." > }
TOKEN : { < O_PAR         : "(" > }
TOKEN : { < C_PAR         : ")" > }
TOKEN : { < O_BRACKET     : "[" > }
TOKEN : { < C_BRACKET     : "]" > }
TOKEN : { < COLON         : ":" > }


void Start(PrintStream printStream):
{ Token t=null;}
{
	programa()
	<EOF>
	{
		if(rs.success())
			cw.printCode();
		else
			rs.printErrors();
	}
}


/* 1. <programa> ::=                                                                        */
/* program <identificador> ;                                                                */
/* <bloco>.                                                                                 */
void programa(): {}
{
  <PROGRAM>
  { cw.putInstruction("INPP"); }
  <IDENTIFIER>
  <SEMICOLON>
  bloco()
  <PERIOD>
  { cw.putInstruction("ENDP"); }
}


/* 2. <bloco> ::=                                                                           */
/* [<parte de declarações de variáveis>]                                                    */
/* [<parte de declarações de procedimentos>]                                                */
/* <comando composto>                                                                       */
void bloco(): {}
{
	[parte_declaracao_variaveis()]
	[parte_declaracao_procedimento()]
	comando_composto()
}


/* 3.   <tipo> ::= <identificador>                                                          */
void tipo(): { Token t = null;}
{
	t = <IDENTIFIER> {
		rs.process("9", t);
	}
}

/* 4. <constante> ::= [+|-] (<identificador> | <numero_inteiro>)                            */
void constante(): {
	Token t;
	Token signal = null;
	Token value = null;
}
{
	[
		signal = <PLUS>
		|
		signal = <MINUS>
	]
	(
		t = <IDENTIFIER> {
			rs.process("0''", t);
			rs.cacheConstant(signal, t);
		}
		|
		t = <NUMBER> {
			rs.process("0'''", t);
			rs.cacheConstant(signal, t);
		}
		{ value = t; }
	)
}

/* 5.  <parte de declarações de variáveis> ::=                                              */
/* var <declaração de variáveis> ;{<declaração de variáveis> ;}                             */
void parte_declaracao_variaveis(): {}
{
	<VAR>
	declaracao_variaveis()
	<SEMICOLON>
	(
		declaracao_variaveis()
		<SEMICOLON>
	)*
}



/* 6. <declaração de variáveis>::=                                                          */
/* <lista de identificadores> : <tipo>                                                      */
void declaracao_variaveis(): {}
{
	lista_identificadores()
	<COLON>
	tipo() {
		rs.process("4", null);
	}
}

/* 7. <lista de identificadores> ::= <identificador> {, <identificador>}                    */
void lista_identificadores(): {
	Token t;
	int address;
}
{
	t = <IDENTIFIER> {
		address = cw.increaseAmenAcc();
		rs.process("3", t, address);
	}
	(
		<COMMA>
		t = <IDENTIFIER> {
			cw.increaseAmenAcc();
			rs.process("3", t, address);
		}
	)*
}


/* 8. <parte de declarações de procedimentos> ::=                                           */
/* {declaração de procedimento> ;}                                                          */
void parte_declaracao_procedimento(): {}
{
		declaracao_procedimento()
		(
		  declaracao_procedimento()
		)*
}

/* 9. <declaração de procedimento> ::=                                                      */
/* procedure <identificador>                                                                */
/* [<parâmetros formais>] ; <bloco>                                                         */
void declaracao_procedimento(): {
	Token t;
}
{
	<PROCEDURE>
	t = <IDENTIFIER> {
		rs.process("5", t);
	}
	[parametros_formais()]
	<SEMICOLON>
	bloco()
	{ rs.process("8", null); }
}

/* 10. <parâmetros formais> ::=                                                             */
/* (<seção de parâmetros formais> { ; <seção de parâmetros formais>} )                      */
void parametros_formais(): {}
{
	<O_PAR>
	secao_parametros_formais()
	(
		<SEMICOLON>
		secao_parametros_formais()
	)*
	<C_PAR>
}

/* 11. <seção de parâmetros formais> ::=                                                    */
/* [var] <lista de identificadores> : <identificador>                                       */
void secao_parametros_formais(): { Token t;}
{
	{ rs.process("14", null); }
	[<VAR>{ rs.process("15", null); }]
	lista_identificadores2()
	<COLON>
	t = <IDENTIFIER> {
		rs.process("19", t);
	}

}

/* 12. <comando composto> ::=  begin <comando> { ; <comando>} end                           */
void comando_composto(): {}
{
	<BEGIN>
	comando()
	(
		<SEMICOLON>
		comando()
	)*
	<END>
}

/* 13. <comado> ::=                                                                         */
/* <atribuição ou chamada de procedimento>                                                  */
/* | <comando composto>                                                                     */
/* | <comando condicional 1>                                                                */
/* | <comando condicional 2>                                                                */
/* | <comando repetitivo 1>                                                                 */
void comando(): {}
{
	atribuicao_ou_chamada_de_procedimento()
	|
	comando_composto()
	|
	comando_condicional_1()
	|
	comando_condicional_2()
	|
	comando_repetitivo_1()
}

/* 14. <atribuição ou chamada de procedimento>::= <identificador> <escolhe proced ou atrib> */
void atribuicao_ou_chamada_de_procedimento(): {Token t;}
{
	t = <IDENTIFIER> {
		rs.cachedToken = t;
	}
	escolhe_proced_ou_atrib()
}

/* 15. <escolhe proced ou atrib> ::=  <atribuição> | <chamada de procedimento>              */
void escolhe_proced_ou_atrib(): {}
{
	atribuicao()
	|
	chamada_procedimento()
}

/* 16. <chamada de procedimento> ::= [ ( <lista de expressões> ) ]                          */
void chamada_procedimento(): {}
{
	{ rs.process("21", rs.cachedToken);
		rs.process("25", rs.cachedToken);
	}
	[
		<O_PAR>
		lista_expressoes()
		<C_PAR>
	]
	{ rs.process("24", rs.cachedToken); }
}

/* 17. <atribuição> ::= := <expressão>                                                      */
void atribuicao(): {}
{
	<ASSIGN>
	{ rs.process("25'", rs.cachedToken); }
	expressao()
	{ rs.setExpressionType(); }
}

/* 18. <comando condicional 1> ::=                                                          */
/* if <expressão> then <comando>                                                            */
/* [else <comando>]                                                                         */
void comando_condicional_1(): {}
{
	<IF>
	expressao()
	{ rs.setExpressionType(); }
	<THEN>
	comando()
	[
		LOOKAHEAD(2)
		<ELSE>
		comando()
	]
}

/* 19. <comando condicional 2> ::=                                                          */
/* case <expressão> of <elemento do case>                                                   */
/* { ;  <elemento do case>} [else <comando>] end                                            */
void comando_condicional_2(): {}
{
	<CASE>
	expressao()
	{ rs.setExpressionType(); }
	<OF>
	elemento_case()
	(
		<SEMICOLON>
		elemento_case()
	)*
	[
		<ELSE>
		comando()
	]
	<END>
	{ rs.process("31", null); }
}

/* 20. <elemento do case> ::= <constante>                                                   */
/* {, constante>} : <comando>                                                               */
void elemento_case(): {}
{
	constante() 
	{ rs.process("30", null); }
	(
		<COMMA>
		constante()
		{ rs.process("30", null); }
	)*
	<COLON>
	comando()
}

/* 21. <comando repetitivo 1> ::=                                                           */
/* while <expressão> do <comando>                                                           */
void comando_repetitivo_1(): {}
{
	<WHILE>
	expressao()
	{ rs.setExpressionType(); }
	<DO>
	comando()
}

/* 22. <expressão> ::= <expressão simples> [<relação> <expressão simples>]                  */
void expressao(): {}
{
	expressao_simples()
	[
		relacao()
		expressao_simples()
	]
}

/* 23. <relação> ::=   = | <> | < | <= | >= | >                                             */
void relacao(): {}
{
	<EQUAL>
	|
	<DIFFERENT>
	|
	<LESS>
	|
	<LESS_EQUAL>
	|
	<GREATER_EQUAL>
	|
	<GREATER>
}


/* 24. <expressão simples> ::=                                                              */
/* [+ | -] <termo> {(+ | - | or) <termo>}                                                   */
void expressao_simples(): {}
{
	[
		<PLUS>
		|
		<MINUS>
	]
	termo()
	(
		(
			<PLUS>
			|
			<MINUS>
			|
			<OR>
		)
		termo()
	)*
}

/* 25. <termo> ::=                                                                          */
/* <fator> {(* | div | and ) <fator> }                                                      */
void termo(): {}
{
	fator()
	(
		(
			<TIMES>
			|
			<DIV>
			|
			<AND>
		)
		fator()
	)*
}

/* 26. <fator> ::=                                                                          */
/* <variavel>                                                                               */
/* | <número>                                                                               */
/* | ( <expressão> )                                                                        */
/* | not <fator>                                                                            */
void fator(): {Token t;}
{
	variavel()
	|
	t = <NUMBER>
	{ rs.process("26", t);
		rs.typeCheckOnNumericFactor(t);
	}
	|
	<O_PAR> expressao() <C_PAR>
	|
	<NOT> fator()
}

/* 27. <variável> ::= <identificador>                                                       */
void variavel(): { Token t;}
{
	t = <IDENTIFIER> {
		rs.process("21", t);
		rs.typeCheckOnFactor(t);
	}
}

/* 28. <lista de expressões> ::=  <expressão> {, <expressão>}                               */
void lista_expressoes(): {}
{
	expressao()
	{ 
		rs.setExpressionType();
		rs.process("23", rs.cachedToken);
	}
	(
		<COMMA>
		expressao()
		{ 
			rs.setExpressionType();
			rs.process("23", rs.cachedToken);
			}
	)*
}


/* 29. <lista de identificadores2> ::= <identificador> {, <identificador>}                    */
void lista_identificadores2(): {
	Token t;
}
{
	t = <IDENTIFIER> {
		rs.process("18", t);
	}
	(
		<COMMA>
		t = <IDENTIFIER> {
			rs.process("18", t);
		}
	)*
}
